/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fuzzymulticriteriadecisionmaking;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author gonzalowtf
 */
public class ItemChange extends javax.swing.JInternalFrame {

    /**
     * Creates new form ItemChoose
     */
    int idproblem =0;
    int iditem = 0;
    String selected = "";
    public ItemChange() {
        initComponents();
    }
    public ItemChange(String choose, String name , String ProblemN) {
        initComponents();
        selected = choose;
        setTitle("Change Name of "+choose+" "+name+"?");
         String url = System.getProperty("user.dir") + "\\datafuzzy.db";
       
        //JOptionPane.showMessageDialog(null, "nombre: "+name + "     lenght :"+name.length() );
        //JOptionPane.showMessageDialog(null, "choose: "+choose + "     lenght :"+choose.length() );
        //JOptionPane.showMessageDialog(null, "problem: "+ProblemN + "     lenght :"+ProblemN.length() );

        try{
        Conn cn = new Conn(url);
         //cn.c.setAutoCommit(false);
        cn.stmt = cn.c.createStatement();
        String sql = "Select idproblem from problems where name ='"+ProblemN.trim()+"'";
        ResultSet rs = cn.stmt.executeQuery(sql);
         int idp =0;
        
        while(rs.next()){
               idp= rs.getInt(1);
               idproblem = idp;
               //JOptionPane.showMessageDialog(null,idp);
            }
        
        switch(choose){
            case "Alternative":
        sql = "Select idalternative from alternatives where name ='"+name.trim()+"' and idproblem ="+idproblem;
        rs = cn.stmt.executeQuery(sql);
         int id =0;
        
        while(rs.next()){
               id= rs.getInt(1);
               iditem = id;
               //JOptionPane.showMessageDialog(null,idp);
            }
                break;
            case "Criteria":
                sql = "Select idcriteria from criterias where name ='"+name.trim()+"' and idproblem ="+idproblem;
        rs = cn.stmt.executeQuery(sql);
         id =0;
        
        while(rs.next()){
               id= rs.getInt(1);
               iditem = id;
               //JOptionPane.showMessageDialog(null,idp);
            }
                break;
            case "Decisor":
                sql = "Select iddecisor from decisors where name ='"+name.trim()+"' and idproblem ="+idproblem;
        rs = cn.stmt.executeQuery(sql);
         id =0;
        
        while(rs.next()){
               id= rs.getInt(1);
               iditem = id;
               //JOptionPane.showMessageDialog(null,idp);
            }
                break;
        }
        
               
        cn.stmt.close();
        cn.c.close();
        }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem  "+ err.toString());
                }        
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        change = new javax.swing.JButton();
        name = new javax.swing.JTextField();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter New Name:");

        change.setText("Change");
        change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActionPerformed(evt);
            }
        });

        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(name))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(349, Short.MAX_VALUE)
                        .addComponent(change)
                        .addGap(18, 18, 18)
                        .addComponent(cancel)))
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(change))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.hide();
    }//GEN-LAST:event_cancelActionPerformed

    private void changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActionPerformed
 if(this.name.getText().isEmpty()){
             JOptionPane.showMessageDialog(null, "Please Enter a new Name  ");

        }
 else
     if(this.name.getText().contains(" ")){
                     JOptionPane.showMessageDialog(null, "Please, don't use spaces on names");

     }
        else{
     
     
     switch(selected){
            
         case "Problem":
        try{
            
          
        String url = System.getProperty("user.dir") + "\\datafuzzy.db";
        String name = this.name.getText();
        Conn cn = new Conn(url);
        cn.stmt = cn.c.createStatement();
        String sql = "update problems set name ='"+name.trim().toUpperCase()+"' where idproblem = "+idproblem;
        cn.stmt.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Problem Name Updated");

        this.hide();
        }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
             break;
         
         case "Alternative":
        try{
            
          
        String url = System.getProperty("user.dir") + "\\datafuzzy.db";
        String name = this.name.getText();
        Conn cn = new Conn(url);
        cn.stmt = cn.c.createStatement();
        String sql = "update alternatives set name ='"+name.trim().toUpperCase()+"' where idproblem = "+idproblem+" and idalternative= "+iditem;
        cn.stmt.executeUpdate(sql);
        JOptionPane.showMessageDialog(null, "Alternative Updated");
       
        this.hide();
        }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
             break;
        
             case "Criteria":
        try{
            
          
        String url = System.getProperty("user.dir") + "\\datafuzzy.db";
        String name = this.name.getText();
        Conn cn = new Conn(url);
        cn.stmt = cn.c.createStatement();
        String sql = "update criterias set name ='"+name.trim().toUpperCase()+"' where idproblem = "+idproblem+" and idcriteria= "+iditem;
        cn.stmt.executeUpdate(sql);
        
        JOptionPane.showMessageDialog(null, "Criteria Updated");
        this.hide();
        }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
             break;
             
       case "Decisor":
        try{
            
          
        String url = System.getProperty("user.dir") + "\\datafuzzy.db";
        String name = this.name.getText();
        Conn cn = new Conn(url);
        cn.stmt = cn.c.createStatement();
        String sql = "update decisors set name ='"+name.trim().toUpperCase()+"' where idproblem = "+idproblem+" and iddecisor= "+iditem;
        
        cn.stmt.executeUpdate(sql);
        JOptionPane.showMessageDialog(null, "Decisor Updated");

        this.hide();
        }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
             break;
            
       
        
        
 
 
 
 } 
    
 }
        
    
        
        
    }//GEN-LAST:event_changeActionPerformed

    private void nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
     if(this.name.getText().isEmpty()){
             JOptionPane.showMessageDialog(null, "Please Enter a new Name  ");

        }
 else
     if(this.name.getText().contains(" ")){
                     JOptionPane.showMessageDialog(null, "Please, don't use spaces on names");

     }
        else{
     
     
     switch(selected){
            
         case "Problem":
        try{
            
          
        String url = System.getProperty("user.dir") + "\\datafuzzy.db";
        String name = this.name.getText();
        Conn cn = new Conn(url);
        cn.stmt = cn.c.createStatement();
        String sql = "update problems set name ='"+name.trim().toUpperCase()+"' where idproblem = "+idproblem;
        cn.stmt.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Problem Name Updated");

        this.hide();
        
        }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
             break;
         
         case "Alternative":
        try{
            
          
        String url = System.getProperty("user.dir") + "\\datafuzzy.db";
        String name = this.name.getText();
        Conn cn = new Conn(url);
        cn.stmt = cn.c.createStatement();
        String sql = "update alternatives set name ='"+name.trim().toUpperCase()+"' where idproblem = "+idproblem+" and idalternative= "+iditem;
        cn.stmt.executeUpdate(sql);
        JOptionPane.showMessageDialog(null, "Alternative Updated");

        this.hide();
        }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
             break;
        
             case "Criteria":
        try{
            
          
        String url = System.getProperty("user.dir") + "\\datafuzzy.db";
        String name = this.name.getText();
        Conn cn = new Conn(url);
        cn.stmt = cn.c.createStatement();
        String sql = "update criterias set name ='"+name.trim().toUpperCase()+"' where idproblem = "+idproblem+" and idcriteria= "+iditem;
        cn.stmt.executeUpdate(sql);
        this.hide();
        JOptionPane.showMessageDialog(null, "Criteria Updated");

        }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
             break;
             
       case "Decisor":
        try{
            
          
        String url = System.getProperty("user.dir") + "\\datafuzzy.db";
        String name = this.name.getText();
        Conn cn = new Conn(url);
        cn.stmt = cn.c.createStatement();
        String sql = "update decisors set name ='"+name.trim().toUpperCase()+"' where idproblem = "+idproblem+" and iddecisor= "+iditem;
        
        cn.stmt.executeUpdate(sql);
        JOptionPane.showMessageDialog(null, "Decisor Updated");

        this.hide();
        }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
             break;
            
       
        
        
 
 
 
 } 
    
 }
        
   }
        
        
    }//GEN-LAST:event_nameKeyPressed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        
    }//GEN-LAST:event_formInternalFrameClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JButton change;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField name;
    // End of variables declaration//GEN-END:variables
}
