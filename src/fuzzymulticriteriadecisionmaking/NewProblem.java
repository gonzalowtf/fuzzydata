/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fuzzymulticriteriadecisionmaking;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author gonzalowtf
 */
public class NewProblem extends javax.swing.JInternalFrame {

    /**
     * Creates new form NewProblem
     */
    public NewProblem() {
        initComponents();
        setTitle("New Problem");
        this.d.removeAllItems();
        for(int i = 1;i<= 20;i++){
            d.addItem(String.valueOf(i));
        }
        this.d.removeAllItems();
        d.addItem("-");
        for(int i = 2;i<= 20;i++){
            d.addItem(String.valueOf(i));
        }
        this.a.removeAllItems();
        a.addItem("-");
        for(int i = 2;i<= 100;i++){
            a.addItem(String.valueOf(i));
        }
        this.c.removeAllItems();
        c.addItem("-");
        for(int i = 2;i<= 50;i++){
            c.addItem(String.valueOf(i));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        d = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        c = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        a = new javax.swing.JComboBox<>();
        cancel = new javax.swing.JButton();
        create = new javax.swing.JButton();

        jLabel1.setText("Problem Name:");

        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameKeyPressed(evt);
            }
        });

        jLabel2.setText("Number of Decisors:");

        d.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        d.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dKeyPressed(evt);
            }
        });

        jLabel3.setText("Number of Cirterias:");

        c.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        c.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cKeyPressed(evt);
            }
        });

        jLabel4.setText("Number of Alternatives:");

        a.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        a.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aKeyPressed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(a, javax.swing.GroupLayout.Alignment.LEADING, 0, 78, Short.MAX_VALUE)
                        .addComponent(c, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(d, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(d, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(create)
                    .addComponent(cancel))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.hide();
    }//GEN-LAST:event_cancelActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        
                
        //JOptionPane.showMessageDialog(null, this.name.getText());
        String name = this.name.getText();
        boolean key = false;
        try{
        String url2 = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn2 = new Conn(url2);
                    //cn2.c.setAutoCommit(false);
                    
                    cn2.stmt = cn2.c.createStatement();
                    String sql2 = "Select * from problems where name = '"+name.toUpperCase()+"'";
                    ResultSet rs2 = cn2.stmt.executeQuery(sql2);
                    
                    while(rs2.next()){
                        key= true;
                    }
                    rs2.close();
                    cn2.stmt.close();
                    cn2.c.close();
       }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
         
        
        if(this.name.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please, enter a problem name");
        }
        else
            if(this.name.getText().contains(" ")){
            JOptionPane.showMessageDialog(null, "Please, don't use spaces on your problem name");
        }
        else
        if(key){
            JOptionPane.showMessageDialog(null, "Problem Name Already Exists");
        }
        else
            if(this.d.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of decisors");
            }
            else
            if(this.c.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of criterias");
            }
            
        else
            if(this.a.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of alternatives");
            }
            else{
                try{
                    name = this.name.getText().toUpperCase();
                    int d = Integer.parseInt(this.d.getSelectedItem().toString());
                    int c = Integer.parseInt(this.c.getSelectedItem().toString());
                    int a = Integer.parseInt(this.a.getSelectedItem().toString());
                    String url = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn = new Conn(url);
                    //cn.c.setAutoCommit(false);
                    cn.stmt = cn.c.createStatement();
                    String sql = "insert into problems values (null, '"+name+"')";
                    cn.stmt.executeUpdate(sql);
                    sql = "Select idproblem from problems where name ='"+name+"'";
                    ResultSet rs = cn.stmt.executeQuery(sql);
                    int idp =0;
                    while(rs.next()){
                        idp= rs.getInt(1);
                    }
                    rs.close();
                    
                    for(int i =0;i< d;i++){
                        sql =  "insert into decisors values (null, 'D"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< c;i++){
                        sql =  "insert into criterias values (null, 'C"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< a;i++){
                        sql =  "insert into alternatives values (null, 'A"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    
                    cn.stmt.close();
                    //cn.c.commit();
                    cn.c.close();
                    
                    JOptionPane.showMessageDialog(null, "Problem Created !");
                    this.hide(); 
                    
                }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
               
            }
        
    }//GEN-LAST:event_createActionPerformed

    private void nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
      String name = this.name.getText();
        boolean key = false;
        try{
        String url2 = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn2 = new Conn(url2);
                    //cn2.c.setAutoCommit(false);
                    
                    cn2.stmt = cn2.c.createStatement();
                    String sql2 = "Select * from problems where name = '"+name.toUpperCase()+"'";
                    ResultSet rs2 = cn2.stmt.executeQuery(sql2);
                    
                    while(rs2.next()){
                        key= true;
                    }
                    rs2.close();
                    cn2.stmt.close();
                    cn2.c.close();
       }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
         
        
        if(this.name.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please, enter a problem name");
        }
        else
            if(this.name.getText().contains(" ")){
            JOptionPane.showMessageDialog(null, "Please, don't use spaces on your problem name");
        }
        else
        if(key){
            JOptionPane.showMessageDialog(null, "Problem Name Already Exists");
        }
        else
            if(this.d.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of decisors");
            }
            else
            if(this.c.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of criterias");
            }
            
        else
            if(this.a.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of alternatives");
            }
            else{
                try{
                    name = this.name.getText().toUpperCase();
                    int d = Integer.parseInt(this.d.getSelectedItem().toString());
                    int c = Integer.parseInt(this.c.getSelectedItem().toString());
                    int a = Integer.parseInt(this.a.getSelectedItem().toString());
                    String url = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn = new Conn(url);
                    //cn.c.setAutoCommit(false);
                    cn.stmt = cn.c.createStatement();
                    String sql = "insert into problems values (null, '"+name+"')";
                    cn.stmt.executeUpdate(sql);
                    sql = "Select idproblem from problems where name ='"+name+"'";
                    ResultSet rs = cn.stmt.executeQuery(sql);
                    int idp =0;
                    while(rs.next()){
                        idp= rs.getInt(1);
                    }
                    rs.close();
                    
                    for(int i =0;i< d;i++){
                        sql =  "insert into decisors values (null, 'D"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< c;i++){
                        sql =  "insert into criterias values (null, 'C"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< a;i++){
                        sql =  "insert into alternatives values (null, 'A"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    
                    cn.stmt.close();
                    //cn.c.commit();
                    cn.c.close();
                    
                    JOptionPane.showMessageDialog(null, "Problem Created !");
                    this.hide(); 
                    
                }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
            }
            }
        
        
        
        
    }//GEN-LAST:event_nameKeyPressed

    private void dKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dKeyPressed
        
         if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
      
        String name = this.name.getText();
        boolean key = false;
        try{
        String url2 = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn2 = new Conn(url2);
                    //cn2.c.setAutoCommit(false);
                    
                    cn2.stmt = cn2.c.createStatement();
                    String sql2 = "Select * from problems where name = '"+name.toUpperCase()+"'";
                    ResultSet rs2 = cn2.stmt.executeQuery(sql2);
                    
                    while(rs2.next()){
                        key= true;
                    }
                    rs2.close();
                    cn2.stmt.close();
                    cn2.c.close();
       }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
         
        
        if(this.name.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please, enter a problem name");
        }
        else
            if(this.name.getText().contains(" ")){
            JOptionPane.showMessageDialog(null, "Please, don't use spaces on your problem name");
        }
        else
        if(key){
            JOptionPane.showMessageDialog(null, "Problem Name Already Exists");
        }
        else
            if(this.d.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of decisors");
            }
            else
            if(this.c.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of criterias");
            }
            
        else
            if(this.a.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of alternatives");
            }
            else{
                try{
                    name = this.name.getText().toUpperCase();
                    int d = Integer.parseInt(this.d.getSelectedItem().toString());
                    int c = Integer.parseInt(this.c.getSelectedItem().toString());
                    int a = Integer.parseInt(this.a.getSelectedItem().toString());
                    String url = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn = new Conn(url);
                    //cn.c.setAutoCommit(false);
                    cn.stmt = cn.c.createStatement();
                    String sql = "insert into problems values (null, '"+name+"')";
                    cn.stmt.executeUpdate(sql);
                    sql = "Select idproblem from problems where name ='"+name+"'";
                    ResultSet rs = cn.stmt.executeQuery(sql);
                    int idp =0;
                    while(rs.next()){
                        idp= rs.getInt(1);
                    }
                    rs.close();
                    
                    for(int i =0;i< d;i++){
                        sql =  "insert into decisors values (null, 'D"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< c;i++){
                        sql =  "insert into criterias values (null, 'C"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< a;i++){
                        sql =  "insert into alternatives values (null, 'A"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    
                    cn.stmt.close();
                    //cn.c.commit();
                    cn.c.close();
                    
                    JOptionPane.showMessageDialog(null, "Problem Created !");
                    this.hide(); 
                    
                }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
               
            }
            
            
   }
        
        
    }//GEN-LAST:event_dKeyPressed

    private void cKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cKeyPressed
        
         if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
          
        String name = this.name.getText();
        boolean key = false;
        try{
        String url2 = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn2 = new Conn(url2);
                    //cn2.c.setAutoCommit(false);
                    
                    cn2.stmt = cn2.c.createStatement();
                    String sql2 = "Select * from problems where name = '"+name.toUpperCase()+"'";
                    ResultSet rs2 = cn2.stmt.executeQuery(sql2);
                    
                    while(rs2.next()){
                        key= true;
                    }
                    rs2.close();
                    cn2.stmt.close();
                    cn2.c.close();
       }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
         
        
        if(this.name.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please, enter a problem name");
        }
        else
            if(this.name.getText().contains(" ")){
            JOptionPane.showMessageDialog(null, "Please, don't use spaces on your problem name");
        }
        else
        if(key){
            JOptionPane.showMessageDialog(null, "Problem Name Already Exists");
        }
        else
            if(this.d.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of decisors");
            }
            else
            if(this.c.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of criterias");
            }
            
        else
            if(this.a.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of alternatives");
            }
            else{
                try{
                    name = this.name.getText().toUpperCase();
                    int d = Integer.parseInt(this.d.getSelectedItem().toString());
                    int c = Integer.parseInt(this.c.getSelectedItem().toString());
                    int a = Integer.parseInt(this.a.getSelectedItem().toString());
                    String url = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn = new Conn(url);
                    //cn.c.setAutoCommit(false);
                    cn.stmt = cn.c.createStatement();
                    String sql = "insert into problems values (null, '"+name+"')";
                    cn.stmt.executeUpdate(sql);
                    sql = "Select idproblem from problems where name ='"+name+"'";
                    ResultSet rs = cn.stmt.executeQuery(sql);
                    int idp =0;
                    while(rs.next()){
                        idp= rs.getInt(1);
                    }
                    rs.close();
                    
                    for(int i =0;i< d;i++){
                        sql =  "insert into decisors values (null, 'D"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< c;i++){
                        sql =  "insert into criterias values (null, 'C"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< a;i++){
                        sql =  "insert into alternatives values (null, 'A"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    
                    cn.stmt.close();
                    //cn.c.commit();
                    cn.c.close();
                    
                    JOptionPane.showMessageDialog(null, "Problem Created !");
                    this.hide(); 
                    
                }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
               
            }
            
            
            
   }
        
        
        
    }//GEN-LAST:event_cKeyPressed

    private void aKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aKeyPressed
        
        
        
         if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
      String name = this.name.getText();
        boolean key = false;
        try{
        String url2 = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn2 = new Conn(url2);
                    //cn2.c.setAutoCommit(false);
                    
                    cn2.stmt = cn2.c.createStatement();
                    String sql2 = "Select * from problems where name = '"+name.toUpperCase()+"'";
                    ResultSet rs2 = cn2.stmt.executeQuery(sql2);
                    
                    while(rs2.next()){
                        key= true;
                    }
                    rs2.close();
                    cn2.stmt.close();
                    cn2.c.close();
       }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
         
        
        if(this.name.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please, enter a problem name");
        }
        else
            if(this.name.getText().contains(" ")){
            JOptionPane.showMessageDialog(null, "Please, don't use spaces on your problem name");
        }
        else
        if(key){
            JOptionPane.showMessageDialog(null, "Problem Name Already Exists");
        }
        else
            if(this.d.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of decisors");
            }
            else
            if(this.c.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of criterias");
            }
            
        else
            if(this.a.getSelectedItem().toString() == "-"){
                JOptionPane.showMessageDialog(null, "Please, choose a number of alternatives");
            }
            else{
                try{
                    name = this.name.getText().toUpperCase();
                    int d = Integer.parseInt(this.d.getSelectedItem().toString());
                    int c = Integer.parseInt(this.c.getSelectedItem().toString());
                    int a = Integer.parseInt(this.a.getSelectedItem().toString());
                    String url = System.getProperty("user.dir") + "\\datafuzzy.db";
                    Conn cn = new Conn(url);
                    //cn.c.setAutoCommit(false);
                    cn.stmt = cn.c.createStatement();
                    String sql = "insert into problems values (null, '"+name+"')";
                    cn.stmt.executeUpdate(sql);
                    sql = "Select idproblem from problems where name ='"+name+"'";
                    ResultSet rs = cn.stmt.executeQuery(sql);
                    int idp =0;
                    while(rs.next()){
                        idp= rs.getInt(1);
                    }
                    rs.close();
                    
                    for(int i =0;i< d;i++){
                        sql =  "insert into decisors values (null, 'D"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< c;i++){
                        sql =  "insert into criterias values (null, 'C"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    for(int i =0;i< a;i++){
                        sql =  "insert into alternatives values (null, 'A"+(i+1)+"', "+idp+")";
                        cn.stmt.executeUpdate(sql);
                    }
                    
                    cn.stmt.close();
                    //cn.c.commit();
                    cn.c.close();
                    
                    JOptionPane.showMessageDialog(null, "Problem Created !");
                    this.hide(); 
                    
                }catch(SQLException err){
                    JOptionPane.showMessageDialog(null, "Data Base Connection Problem (new p 208) "+ err.toString());
                }
               
            }
         }
        
        
        
    }//GEN-LAST:event_aKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> a;
    private javax.swing.JComboBox<String> c;
    private javax.swing.JButton cancel;
    private javax.swing.JButton create;
    private javax.swing.JComboBox<String> d;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField name;
    // End of variables declaration//GEN-END:variables
}
